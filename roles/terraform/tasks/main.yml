---
# tags - install, create, destroy

# Reminder to set and use destroy in the correct playbook.
- name: Fail if destroy is undefined
  ansible.builtin.fail:
    msg: "The variable 'destroy' must be set to destroy infrastructure. (Are you using the correct playbook?)"
  when: destroy is undefined
  tags: ['never', 'destroy-infra']

- name: Tear down infrastructure
  block:
    - name: Remove service
      community.general.terraform:
        project_path: /home/ubuntu/proj
        state: absent
      become: true
      become_user: ubuntu
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_REGION: "{{ aws_region }}"
      register: terraform
    - debug: var=terraform
  when: destroy
  tags: ['never', 'destroy-infra']

- name: Install Terraform
  block:
    - debug: var=ansible_distribution_release
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install required packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - gnupg
        - software-properties-common

    - name: Add Hashicorp GPG key
      shell: |
        wget -O- https://apt.releases.hashicorp.com/gpg | \
        gpg --dearmor | \
        sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
      args:
        executable: /bin/bash

    - name: Verify GPG key fingerprint
      shell: |
        gpg --no-default-keyring \
        --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \
        --fingerprint
      args:
        executable: /bin/bash

    - name: Add Hashicorp APT repository
      apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
        state: present
        filename: hashicorp

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install Terraform
      ansible.builtin.apt:
        name: terraform
        state: present
  tags: ['never', 'install']

- name: Set up infrastructure
  block:
    - name: Determine if the infra project directory already exists
      ansible.builtin.stat:
        path: "{{ terraform_path }}"
        # Consider looking for this instead
        # path: "{{ terraform_path }}/.terraform.lock.hcl"
      register: infra_dir

    - name: Report that the infrastructure dir already exists
      ansible.builtin.debug:
        msg: "No terraform files will be synced since the project directory exists."
      when: infra_dir.stat.exists

    - name: rsync terraform files
      ansible.posix.synchronize:
        src: "{{ infra_local_path }}"
        dest: "{{ infra_remote_path }}"
        delete: true
      remote_user: ubuntu
      when: not infra_dir.stat.exists

    - name: Deploy service
      community.general.terraform:
        project_path: "{{ terraform_path }}"
        state: present
        force_init: true
      become: true
      become_user: ubuntu
      environment:
        AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
        AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
        AWS_REGION: "{{ aws_region }}"
      register: tf_out
    - debug: var=tf_out
  tags: ['never', 'deploy-infra']
